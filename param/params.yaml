behavior_controller:
  ros__parameters:
    scan_topic: "/scan"
    odom_topic: "/odom"
    imu_topic: "/imu"
    joy_topic: "/joy"
    keyboard_topic: "/key"
    brake_bool_topic: "/brake_bool"
    mux_topic: "/mux"
    joy_mux_idx: 0
    key_mux_idx: 1
    random_walker_mux_idx: 2
    brake_mux_idx: 3
    nav_mux_idx: 4
    joy_button_idx: 4  # LB button
    key_button_idx: 6 # not sure
    random_walk_button_idx: 1 # ? button
    brake_button_idx: 0 # A button
    nav_button_idx: 5 # RB button
    joy_key_char: "j"
    keyboard_key_char: "k"
    random_walk_key_char: "r"
    brake_key_char: "b"
    nav_key_char: "n"
    mux_size: 5
    scan_beams: 1080
    scan_distance_to_base_link: 0.275 # meters
    width: 0.2032 # meters
    wheelbase: 0.3302 # meters
    scan_field_of_view: 6.2831853 #4.71 # radians
    collision_file: "collision_file"

keyboard:
  ros__parameters:
    keyboard_topic: "/key"

mux_controller:
  ros__parameters:
    drive_topic: "/drive"
    mux_topic: "/mux"
    joy_topic: "/joy"
    keyboard_topic: "/key"
    joy_mux_idx: 0
    key_mux_idx: 1
    joy_speed_axis: 1
    joy_angle_axis: 3
    max_steering_angle: 0.4189 # radians
    max_speed: 7. #  meters/second
    keyboard_speed: 1.8  # meters/second
    keyboard_steer_ang: .3  # radians
    mux_size: 5
    random_walker_mux_idx: 2
    rand_drive_topic: "/rand_drive"
    brake_mux_idx: 3
    brake_drive_topic: "/brake"
    nav_mux_idx: 4
    nav_drive_topic: "/nav"

random_walker:
  ros__parameters:
    rand_drive_topic: "/rand_drive"
    odom_topic: "/odom"
    max_speed: 7. #  meters/second
    max_steering_angle: 0.4189 # radians

racecar_simulator:
  ros__parameters:
    drive_topic: "/drive"
    map_topic: "/map"
    scan_topic: "/scan"
    pose_topic: "/pose"
    odom_topic: "/odom"
    pose_rviz_topic: "/initialpose"
    imu_topic: "/imu"
    ground_truth_pose_topic: "/gt_pose"
    buffer_length: 5
    map_frame: "map"
    base_frame: "base_link"
    scan_frame: "laser"
    scan_beams: 1080
    update_pose_rate: 0.001
    scan_std_dev: 0.01 # meters
    scan_field_of_view: 6.2831853 #4.71 # radians
    map_free_threshold: 0.8
    scan_distance_to_base_link: 0.275 # meters
    max_steering_angle: 0.4189 # radians
    max_speed: 7. #  meters/second
    max_accel: 7.51 # meters/second^2
    max_decel: 8.26 # meters/second^2
    max_steering_vel: 3.2 # radians/second
    width: 0.2032 # meters
    wheelbase: 0.3302 # meters
    friction_coeff: 0.523 # - (complete estimate)
    height_cg: 0.074 # m (roughly measured to be 3.25 in)
    l_cg2rear: 0.17145 # m (decently measured to be 6.75 in)
    l_cg2front: 0.15875 # m (decently measured to be 6.25 in)
    C_S_front: 4.718 #.79 # 1/rad ? (estimated weight/4)
    C_S_rear: 5.4562 #.79 # 1/rad ? (estimated weight/4)
    moment_inertia: .04712 # kg m^2 (estimated as a rectangle with width and height of car and evenly distributed mass, then shifted to account for center of mass location)
    mass: 3.47 # kg (measured on car 'lidart')
    speed_clip_diff: 0.0 # TODO:: does not exist in the original params.yaml file
    broadcast_transform: true
    publish_ground_truth_pose: true
    obstacle_size: 2
    ttc_threshold: 0.01

# nav2 bringup
amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "differential"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    controller_plugins: ["FollowPath"]

    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.22
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.22
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 0
      vtheta_samples: 40
      sim_time: 1.5
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.05
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.1
      plugins: ["obstacle_layer", "voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 1.0
        cost_scaling_factor: 3.0
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: pointcloud
        pointcloud:
          topic: /intel_realsense_r200_depth/points
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      robot_radius: 0.1
      resolution: 0.05
      plugins: ["static_layer", "obstacle_layer", "voxel_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: pointcloud
        pointcloud:
          topic: /intel_realsense_r200_depth/points
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 0.55
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "berlin.yaml"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

  # # The distance between the front and
  # # rear axle of the racecar
  # wheelbase: 0.3302 # meters
  # # width of racecar
  # width: 0.2032 # meters

  # # steering delay
  # buffer_length: 5

  # # Limits on the speed and steering angle
  # max_speed: 7. #  meters/second
  # max_steering_angle: 0.4189 # radians
  # max_accel: 7.51 # meters/second^2
  # max_decel: 8.26 # meters/second^2
  # max_steering_vel: 3.2 # radians/second
  # friction_coeff: 0.523 # - (complete estimate)
  # height_cg: 0.074 # m (roughly measured to be 3.25 in)
  # l_cg2rear: 0.17145 # m (decently measured to be 6.75 in)
  # l_cg2front: 0.15875 # m (decently measured to be 6.25 in)
  # C_S_front: 4.718 #.79 # 1/rad ? (estimated weight/4)
  # C_S_rear: 5.4562 #.79 # 1/rad ? (estimated weight/4)
  # mass: 3.47 # kg (measured on car 'lidart')
  # moment_inertia: .04712 # kg m^2 (estimated as a rectangle with width and height of car and evenly distributed mass, then shifted to account for center of mass location)

  # # The rate at which the pose and the lidar publish
  # update_pose_rate: 0.001

  # # Lidar simulation parameters
  # scan_beams: 1080
  # scan_field_of_view: 6.2831853 #4.71 # radians


  # # The distance from the center of the
  # # rear axis (base_link) to the lidar
  # scan_distance_to_base_link: 0.275 # meters

  # # The standard deviation of the noise applied
  # # to the lidar simulation
  # scan_std_dev: 0.01 # meters

  # # The probability threshold for points
  # # in the occupancy grid to be considered "free".
  # # Used for the lidar simulator.
  # map_free_threshold: 0.8

  # # Time to collision cutoff value
  # ttc_threshold: 0.01

  # # Indices for mux controller
  # mux_size: 5
  # joy_mux_idx: 0
  # key_mux_idx: 1
  # random_walker_mux_idx: 2
  # brake_mux_idx: 3
  # nav_mux_idx: 4
  # # **Add index for new planning method here**
  # # **(increase mux_size accordingly)**
  # new_method_mux_idx: -1

  # # Enables joystick if true
  # joy: true
  # # Joystick indices
  # joy_speed_axis: 1
  # joy_angle_axis: 3
  # joy_max_speed: 2. # meters/second
  # # Joystick indices for toggling mux
  # joy_button_idx: 4  # LB button
  # key_button_idx: 6 # not sure
  # brake_button_idx: 0 # A button
  # random_walk_button_idx: 1 # ? button
  # nav_button_idx: 5 # RB button
  # # **Add button for new planning method here**
  # new_button_idx: -1

  # # Keyboard characters for toggling mux
  # joy_key_char: "j"
  # keyboard_key_char: "k"
  # brake_key_char: "b"
  # random_walk_key_char: "r"
  # nav_key_char: "n"
  # # **Add button for new planning method here**
  # new_key_char: "z"

  # # Keyboard driving params
  # keyboard_speed: 1.8  # meters/second
  # keyboard_steer_ang: .3  # radians

  # # obstacle parameters
  # obstacle_size: 2

  # # The names of topics to listen and publish to
  # joy_topic: "/joy"
  # drive_topic: "/drive"
  # map_topic: "/map"
  # distance_transform_topic: "/dt"
  # pose_topic: "/pose"
  # ground_truth_pose_topic: "/gt_pose"
  # odom_topic: "/odom"
  # pose_rviz_topic: "/initialpose"
  # keyboard_topic: "/key"

  # # Topic names of various drive channels
  # rand_drive_topic: "/rand_drive"
  # brake_drive_topic: "/brake"
  # nav_drive_topic: "/nav"
  # # **Add name for new planning method here**
  # new_drive_topic: "/new_drive"

  # # name of file to write collision log to
  # collision_file: "collision_file"

  # # The names of the transformation frames published to
  # map_frame: "map"
  # base_frame: "base_link"
  # scan_frame: "laser"

  # broadcast_transform: true
  # publish_ground_truth_pose: true
